package requetePage;

import ProtocoleSAMOP.ReponseSAMOP;
import ProtocoleSAMOP.RequeteSAMOP;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.SSLSocket;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author luybe
 */
public class requetePage extends javax.swing.JFrame {
    private ObjectInputStream ois;
    private ObjectOutputStream oos;
     private SSLSocket SslSocket;
     private String fonction;
       private String login;
    /**
     * Creates new form requetePage
     */
    public requetePage() {
        initComponents();
    }

    public requetePage(ObjectInputStream _ois, ObjectOutputStream _oos, SSLSocket _SslSocket, String _fonction, String _login) {
        initComponents();
        ois=_ois;
        oos=_oos;
        SslSocket = _SslSocket;
     
        if(_login!=null && _fonction !=null)
        {
            fonction = _fonction;
            login = _login;
            
         fonction=fonction.toLowerCase();
         login=login.toLowerCase();
         
         
         String firstLetStr = fonction.substring(0, 1);
        // Get remaining letter using substring
        String remLetStr = fonction.substring(1);
        // convert the first letter of String to uppercase
        firstLetStr = firstLetStr.toUpperCase();
        // concantenate the first letter and remaining string
        String fonc = firstLetStr + remLetStr;
        
        String firstLetStr2 = login.substring(0, 1);
        // Get remaining letter using substring
        String remLetStr2 = login.substring(1);
        // convert the first letter of String to uppercase
        firstLetStr2 = firstLetStr2.toUpperCase();
        String log = firstLetStr2 + remLetStr2;
      
        loginLB.setText(log);
        statusLB.setText(fonc);
        }
       else
        {
            loginLB.setText("invite");
            statusLB.setText("invite");
        }
      
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        compute_salBT = new javax.swing.JButton();
        validate_salBT = new javax.swing.JButton();
        launch_paymentBT = new javax.swing.JButton();
        launch_paymentsBT = new javax.swing.JButton();
        ask_paymentsBT = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        salaireVal = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        creerSalaire = new javax.swing.JButton();
        loginLB = new javax.swing.JLabel();
        statusLB = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        valideList = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Vous êtes connecté en tant que :");

        jLabel2.setText("Votre status :");

        compute_salBT.setText("Calcul des salaires ");
        compute_salBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compute_salBTActionPerformed(evt);
            }
        });

        validate_salBT.setText("Voir les salaires en attentes");
        validate_salBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validate_salBTActionPerformed(evt);
            }
        });

        launch_paymentBT.setText("Lancer un paiement");
        launch_paymentBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launch_paymentBTActionPerformed(evt);
            }
        });

        launch_paymentsBT.setText("Lancer tout les paiements");
        launch_paymentsBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launch_paymentsBTActionPerformed(evt);
            }
        });

        ask_paymentsBT.setText("Listes des paiements ");
        ask_paymentsBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ask_paymentsBTActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        salaireVal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Identifiant", "Nom", "Prenom", "Date", "Montant brut", "Montant net", "Retrait", "Mail", "Versement"
            }
        )
        {public boolean isCellEditable(int row, int column){return false;}}
    );
    jScrollPane2.setViewportView(salaireVal);

    jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

    creerSalaire.setText("Creer un salaire");
    creerSalaire.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            creerSalaireActionPerformed(evt);
        }
    });

    loginLB.setText("jLabel3");

    statusLB.setText("jLabel3");

    jButton1.setText("Valider les salaires");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });

    valideList.setModel(new javax.swing.AbstractListModel<String>() {
        String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
        public int getSize() { return strings.length; }
        public String getElementAt(int i) { return strings[i]; }
    });
    jScrollPane3.setViewportView(valideList);

    jLabel3.setText("Liste des salaires validés :");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(loginLB)
                    .addGap(184, 184, 184)
                    .addComponent(jLabel2)
                    .addGap(18, 18, 18)
                    .addComponent(statusLB)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(compute_salBT)
                                        .addComponent(validate_salBT, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(creerSalaire))
                                    .addGap(0, 0, Short.MAX_VALUE)))
                            .addGap(18, 18, 18))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(ask_paymentsBT)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(launch_paymentsBT)
                        .addComponent(launch_paymentBT))
                    .addGap(103, 103, 103))))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap(38, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(jLabel2)
                .addComponent(loginLB)
                .addComponent(statusLB))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(compute_salBT)
                        .addComponent(launch_paymentBT))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(24, 24, 24)
                            .addComponent(validate_salBT)
                            .addGap(1, 1, 1)
                            .addComponent(jButton1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(13, 13, 13)
                            .addComponent(launch_paymentsBT)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(ask_paymentsBT)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel3)
                    .addGap(10, 10, 10)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(creerSalaire))
                .addComponent(jSeparator2)))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void compute_salBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compute_salBTActionPerformed
          
        try {
            RequeteSAMOP req = new RequeteSAMOP(RequeteSAMOP.COMPUTE_SAL, "");
            oos.writeObject(req);
            oos.flush();
            ReponseSAMOP rep = null;
            
            rep = (ReponseSAMOP) ois.readObject();
             String repToParse = rep.getChargeUtile();
                          String[] parse = repToParse.split(":");
                          String[][] parse2 = new String[parse.length][0];
                                int j = 0;
                                for (int y = 1; y < parse.length; y++) {
                                    parse2[j] = parse[y].split("@");
                                    j++;
                                }
                                int k=0;
                                int l=0;
                            while(k<parse2.length-1)
                            {
                                l=0;
                                while(l<9)
                                {
                                    System.out.println("PARSE2 n°"+k +" : " + parse2[k][l]);  
                                    l++;
                                }  
                                 k++;
                            }
             String[] entetes = {"Matricule", "Nom", "Prenom", "Date", "SalaireBrut","SalaireNet","Retrait","Envoie","Versement"};        
             
               DefaultTableModel model = (DefaultTableModel) salaireVal.getModel();
   
            for(int i=0;i<parse2.length-1;i++)
               {
                          model.addRow(parse2[i]);
               }                     
        } catch (IOException ex) {
            Logger.getLogger(requetePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(requetePage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }//GEN-LAST:event_compute_salBTActionPerformed

    private void validate_salBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validate_salBTActionPerformed
           try {
            RequeteSAMOP req = new RequeteSAMOP(RequeteSAMOP.GET_SAL, "");
            oos.writeObject(req);
            oos.flush();
            ReponseSAMOP rep = null;
            
            rep = (ReponseSAMOP) ois.readObject();
             String repToParse = rep.getChargeUtile();
                          String[] parse = repToParse.split(":");
                          String[][] parse2 = new String[parse.length][0];
                                int j = 0;
                                for (int y = 1; y < parse.length; y++) {
                                    parse2[j] = parse[y].split("@");
                                    j++;
                                }
                                int k=0;
                                int l=0;
                            while(k<parse2.length-1)
                            {
                                l=0;
                                while(l<9)
                                {
                                    System.out.println("PARSE2 n°"+k +" : " + parse2[k][l]);  
                                    l++;
                                }  
                                 k++;
                            }
             String[] entetes = {"Matricule", "Nom", "Prenom", "Date", "SalaireBrut","SalaireNet","Retrait","Envoie","Versement"};        
             
               DefaultTableModel model = (DefaultTableModel) salaireVal.getModel();
   
            for(int i=0;i<parse2.length-1;i++)
               {
                          model.addRow(parse2[i]);
               }                     
        } catch (IOException ex) {
            Logger.getLogger(requetePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(requetePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_validate_salBTActionPerformed

    private void launch_paymentBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launch_paymentBTActionPerformed
         try {
            RequeteSAMOP req = new RequeteSAMOP(RequeteSAMOP.LAUNCH_PAYMENT, "");
            oos.writeObject(req);
            oos.flush();
            ReponseSAMOP rep = null;
            
            rep = (ReponseSAMOP) ois.readObject();
        } catch (IOException ex) {
            Logger.getLogger(requetePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(requetePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_launch_paymentBTActionPerformed

    private void launch_paymentsBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launch_paymentsBTActionPerformed
         try {
            RequeteSAMOP req = new RequeteSAMOP(RequeteSAMOP.LAUNCH_PAYMENTS, "");
            oos.writeObject(req);
            oos.flush();
            ReponseSAMOP rep = null;
            
            rep = (ReponseSAMOP) ois.readObject();
        } catch (IOException ex) {
            Logger.getLogger(requetePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(requetePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_launch_paymentsBTActionPerformed

    private void ask_paymentsBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ask_paymentsBTActionPerformed
        try {
            RequeteSAMOP req = new RequeteSAMOP(RequeteSAMOP.LAUNCH_PAYMENTS, "");
            oos.writeObject(req);
            oos.flush();
            ReponseSAMOP rep = null;
            rep = (ReponseSAMOP) ois.readObject();
        } catch (IOException ex) {
            Logger.getLogger(requetePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(requetePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ask_paymentsBTActionPerformed

    private void creerSalaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creerSalaireActionPerformed
       createSal cS = new createSal(ois,oos,SslSocket);
       cS.setVisible(true);
    }//GEN-LAST:event_creerSalaireActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
           
            try {
            RequeteSAMOP req = new RequeteSAMOP(RequeteSAMOP.VALIDATE_SAL, "");
            oos.writeObject(req);
            oos.flush();
            ReponseSAMOP rep = null;
            
            rep = (ReponseSAMOP) ois.readObject();
        } catch (IOException ex) {
            Logger.getLogger(requetePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(requetePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(requetePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(requetePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(requetePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(requetePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new requetePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ask_paymentsBT;
    private javax.swing.JButton compute_salBT;
    private javax.swing.JButton creerSalaire;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton launch_paymentBT;
    private javax.swing.JButton launch_paymentsBT;
    private javax.swing.JLabel loginLB;
    private javax.swing.JTable salaireVal;
    private javax.swing.JLabel statusLB;
    private javax.swing.JButton validate_salBT;
    private javax.swing.JList<String> valideList;
    // End of variables declaration//GEN-END:variables
}
